~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
testSmallerDimVal() - (requires constructor to not crash on empty vector)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
smallerDimVal(a, b, 0) = true
smallerDimVal(a, b, 2) = false
smallerDimVal(a, b, 1) = true

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
testShouldReplace() - (requires constructor to not crash on empty vector)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
shouldReplace(target, currentBest1, possibleBest1) = true
shouldReplace(target, currentBest2, possibleBest2) = false
shouldReplace(target, currentBest3, possibleBest3) = false

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
testLinearCtor<1>(10) - constructs a 1D tree of points 0 through 9
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
points[]:     point_index[]:    points[point_index[]]:
p[0] = (0)    p_i[0] = 0        p[p_i[0]] = (0)       
p[1] = (1)    p_i[1] = 1        p[p_i[1]] = (1)       
p[2] = (2)    p_i[2] = 2        p[p_i[2]] = (2)       
p[3] = (3)    p_i[3] = 3        p[p_i[3]] = (3)       
p[4] = (4)    p_i[4] = 4        p[p_i[4]] = (4)       
p[5] = (5)    p_i[5] = 5        p[p_i[5]] = (5)       
p[6] = (6)    p_i[6] = 6        p[p_i[6]] = (6)       
p[7] = (7)    p_i[7] = 7        p[p_i[7]] = (7)       
p[8] = (8)    p_i[8] = 8        p[p_i[8]] = (8)       
p[9] = (9)    p_i[9] = 9        p[p_i[9]] = (9)       

~  Tree Diagram  ~    ~    ~    ~    ~    ~    ~
            __(4)__                
         __/       \__             
      (1)             (7)          
     /   \           /   \         
  (0)     (2)     (5)     (8)      
            \       \       \      
            (3)     (6)     (9)    

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
testLinearNNS<1>(10) - findNearestNeighbor on a 1D tree of elements 0 to 9
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
findNearestNeighbor((0)) = (0)
findNearestNeighbor((1)) = (1)
findNearestNeighbor((2)) = (2)
findNearestNeighbor((3)) = (3)
findNearestNeighbor((4)) = (4)
findNearestNeighbor((5)) = (5)
findNearestNeighbor((6)) = (6)
findNearestNeighbor((7)) = (7)
findNearestNeighbor((8)) = (8)
findNearestNeighbor((9)) = (9)

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
testLinearCtor<3>(31) - constructs a 3D tree of points 0 through 30
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
points[]:               point_index[]:    points[point_index[]]:   
p[0] = (0, 0, 0)        p_i[0] = 0        p[p_i[0]] = (0, 0, 0)    
p[1] = (1, 1, 1)        p_i[1] = 1        p[p_i[1]] = (1, 1, 1)    
p[2] = (2, 2, 2)        p_i[2] = 2        p[p_i[2]] = (2, 2, 2)    
p[3] = (3, 3, 3)        p_i[3] = 3        p[p_i[3]] = (3, 3, 3)    
p[4] = (4, 4, 4)        p_i[4] = 4        p[p_i[4]] = (4, 4, 4)    
p[5] = (5, 5, 5)        p_i[5] = 5        p[p_i[5]] = (5, 5, 5)    
p[6] = (6, 6, 6)        p_i[6] = 6        p[p_i[6]] = (6, 6, 6)    
p[7] = (7, 7, 7)        p_i[7] = 7        p[p_i[7]] = (7, 7, 7)    
p[8] = (8, 8, 8)        p_i[8] = 8        p[p_i[8]] = (8, 8, 8)    
p[9] = (9, 9, 9)        p_i[9] = 9        p[p_i[9]] = (9, 9, 9)    
p[10] = (10, 10, 10)    p_i[10] = 10      p[p_i[10]] = (10, 10, 10)
p[11] = (11, 11, 11)    p_i[11] = 11      p[p_i[11]] = (11, 11, 11)
p[12] = (12, 12, 12)    p_i[12] = 12      p[p_i[12]] = (12, 12, 12)
p[13] = (13, 13, 13)    p_i[13] = 13      p[p_i[13]] = (13, 13, 13)
p[14] = (14, 14, 14)    p_i[14] = 14      p[p_i[14]] = (14, 14, 14)
p[15] = (15, 15, 15)    p_i[15] = 15      p[p_i[15]] = (15, 15, 15)
p[16] = (16, 16, 16)    p_i[16] = 16      p[p_i[16]] = (16, 16, 16)
p[17] = (17, 17, 17)    p_i[17] = 17      p[p_i[17]] = (17, 17, 17)
p[18] = (18, 18, 18)    p_i[18] = 18      p[p_i[18]] = (18, 18, 18)
p[19] = (19, 19, 19)    p_i[19] = 19      p[p_i[19]] = (19, 19, 19)
p[20] = (20, 20, 20)    p_i[20] = 20      p[p_i[20]] = (20, 20, 20)
p[21] = (21, 21, 21)    p_i[21] = 21      p[p_i[21]] = (21, 21, 21)
p[22] = (22, 22, 22)    p_i[22] = 22      p[p_i[22]] = (22, 22, 22)
p[23] = (23, 23, 23)    p_i[23] = 23      p[p_i[23]] = (23, 23, 23)
p[24] = (24, 24, 24)    p_i[24] = 24      p[p_i[24]] = (24, 24, 24)
p[25] = (25, 25, 25)    p_i[25] = 25      p[p_i[25]] = (25, 25, 25)
p[26] = (26, 26, 26)    p_i[26] = 26      p[p_i[26]] = (26, 26, 26)
p[27] = (27, 27, 27)    p_i[27] = 27      p[p_i[27]] = (27, 27, 27)
p[28] = (28, 28, 28)    p_i[28] = 28      p[p_i[28]] = (28, 28, 28)
p[29] = (29, 29, 29)    p_i[29] = 29      p[p_i[29]] = (29, 29, 29)
p[30] = (30, 30, 30)    p_i[30] = 30      p[p_i[30]] = (30, 30, 30)

~  Tree Diagram  ~    ~    ~    ~    ~    ~    ~
                              (15,                                 
                               15,                                 
                        ______ 15)_____                            
                 ______/               \______                     
              (7,                             (23,                 
               7,                              23,                 
            __ 7)__                         __ 23)_                
         __/       \__                   __/       \__             
      (3,             (11,            (19,            (27,         
       3,              11,             19,             27,         
       3)              11)             19)             27)         
     /   \           /   \           /   \           /   \         
  (1,     (5,     (9,     (13,    (17,    (21,    (25,    (29,     
   1,      5,      9,      13,     17,     21,     25,     29,     
   1)      5)      9)      13)     17)     21)     25)     29)     
  / \     / \     / \     / \     / \     / \     / \     / \      
(0, (2, (4, (6, (8, (10,(12,(14,(16,(18,(20,(22,(24,(26,(28,(30,   
 0,  2,  4,  6,  8,  10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30,   
 0)  2)  4)  6)  8)  10) 12) 14) 16) 18) 20) 22) 24) 26) 28) 30)   

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
testLinearNNS<3>(31) - findNearestNeighbor on a 3D tree of elements 0 to 30
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
findNearestNeighbor((0, 0, 0)) = (0, 0, 0)
findNearestNeighbor((1, 1, 1)) = (1, 1, 1)
findNearestNeighbor((2, 2, 2)) = (2, 2, 2)
findNearestNeighbor((3, 3, 3)) = (3, 3, 3)
findNearestNeighbor((4, 4, 4)) = (4, 4, 4)
findNearestNeighbor((5, 5, 5)) = (5, 5, 5)
findNearestNeighbor((6, 6, 6)) = (6, 6, 6)
findNearestNeighbor((7, 7, 7)) = (7, 7, 7)
findNearestNeighbor((8, 8, 8)) = (8, 8, 8)
findNearestNeighbor((9, 9, 9)) = (9, 9, 9)
findNearestNeighbor((10, 10, 10)) = (10, 10, 10)
findNearestNeighbor((11, 11, 11)) = (11, 11, 11)
findNearestNeighbor((12, 12, 12)) = (12, 12, 12)
findNearestNeighbor((13, 13, 13)) = (13, 13, 13)
findNearestNeighbor((14, 14, 14)) = (14, 14, 14)
findNearestNeighbor((15, 15, 15)) = (15, 15, 15)
findNearestNeighbor((16, 16, 16)) = (16, 16, 16)
findNearestNeighbor((17, 17, 17)) = (17, 17, 17)
findNearestNeighbor((18, 18, 18)) = (18, 18, 18)
findNearestNeighbor((19, 19, 19)) = (19, 19, 19)
findNearestNeighbor((20, 20, 20)) = (20, 20, 20)
findNearestNeighbor((21, 21, 21)) = (21, 21, 21)
findNearestNeighbor((22, 22, 22)) = (22, 22, 22)
findNearestNeighbor((23, 23, 23)) = (23, 23, 23)
findNearestNeighbor((24, 24, 24)) = (24, 24, 24)
findNearestNeighbor((25, 25, 25)) = (25, 25, 25)
findNearestNeighbor((26, 26, 26)) = (26, 26, 26)
findNearestNeighbor((27, 27, 27)) = (27, 27, 27)
findNearestNeighbor((28, 28, 28)) = (28, 28, 28)
findNearestNeighbor((29, 29, 29)) = (29, 29, 29)
findNearestNeighbor((30, 30, 30)) = (30, 30, 30)

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
testDeceptiveNNOneLevel() - tests for nearest neighbors across the dividing line
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
              (-5,                 
            __ 0)__                
         __/       \__             
      (-13,           (14,         
       -1)             2)          
         \           /   \         
          (-15,   (14,    (6,      
           7)      -3)     7)      
  ~    ~    ~    ~    ~    ~    ~
findNearestNeighbor((-13, 1)) result   = (-13, -1)
findNearestNeighbor((-13, 1)) expected = (-13, -1)

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
testMines() - tests that you don't look at nodes you don't need to
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
              (0,                  
            __ 7)__                
         __/       \__             
      (-3,            {5,          
       5)              -4}         
     /   \           /   \         
  (-6,    (-8,    {2,     {3,      
   4)      7)      -7}     0}      
            \       \       \      
            (-5,    {7,     {6,    
             6)      -6}     -3}   
  ~    ~    ~    ~    ~    ~    ~
findNearestNeighbor((-7, 5)) result   = (-6, 4)
findNearestNeighbor((-7, 5)) expected = (-6, 4)

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
testDeceptiveMines() - tests fence jumping with land mines
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                              (51,                                 
                        ______ 35)_____                            
                 ______/               \______                     
              (44,                            {84,                 
            __ 43)_                         __ 44}_                
         __/       \__                   __/       \__             
      {28,            (43,            {60,            {88,         
       10}             65)             30}             72}         
     /   \           /   \           /   \           /   \         
  {14,    {48,    (42,    (44,    {59,    {74,    {54,    {95,     
   15}     0}      63)     79)     0}      0}      62}     50}     
            \               \               \       \       \      
            {34,            (49,            {82,    {75,    {96,   
             15}             83)             20}     68}     56}   
  ~    ~    ~    ~    ~    ~    ~
findNearestNeighbor((45, 59)) result   = (42, 63)
findNearestNeighbor((45, 59)) expected = (42, 63)

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
testTieBreaking() - tests operator< used to break ties (building & searching)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
              (0,                  
               100,                
            __ 100)                
         __/       \__             
      (0,             (100,        
       0,              0,          
       100)            100)        
     /   \           /   \         
  (0,     (0,     (100,   (100,    
   0,      100,    0,      100,    
   0)      0)      0)      0)      
    \     / \     / \     / \      
    (0, (0, (0, (50,(50,(50,(50,   
     0,  50, 50, 0,  0,  50, 50,   
     50) 0)  50) 0)  50) 0)  50)   
  ~    ~    ~    ~    ~    ~    ~
Test finds operator< smallest on other side:
findNearestNeighbor((50, 100, 0)) result   = (0, 100, 0)
findNearestNeighbor((50, 100, 0)) expected = (0, 100, 0)

Test condition for going to other side:
findNearestNeighbor((14, 17, 20)) result   = (0, 0, 0)
findNearestNeighbor((14, 17, 20)) expected = (0, 0, 0)

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
testLeftRecurse() - tests that left recursion doesn't include the root node
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
              (5,                  
               3,                  
            __ 1)__                
         __/       \__             
      (3,             (12,         
       1,              12,         
       10)             12)         
     /   \           /   \         
  (2,     (4,     (10,    (13,     
   0,      3,      10,     13,     
   8)      0)      10)     13)     
            \       \       \      
            (0,     (11,    (14,   
             2,      11,     14,   
             9)      11)     14)   
  ~    ~    ~    ~    ~    ~    ~
findNearestNeighbor((1, 1, 9)) result   = (0, 2, 9)
findNearestNeighbor((1, 1, 9)) expected = (0, 2, 9)

